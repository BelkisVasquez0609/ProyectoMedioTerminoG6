//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Belkis Vasquez\source\repos\ProyectoMedioTerminoG6\ProyectoMedioTerminoG6\Proyecto.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ProyectoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HOST_LBL=1, BECOME_LBL=2, TASKS_LBL=3, NAME_LBL=4, MAYORQUE=5, GUION=6, 
		DIR=7, SEP=8, SP=9, PUNTO=10, NUM=11, TEXT=12, WORD=13, NEWLINE=14, BACKSLASH=15;
	public const int
		RULE_program = 0, RULE_script = 1, RULE_host = 2, RULE_become = 3, RULE_tasks_lb = 4, 
		RULE_tasks = 5, RULE_name = 6, RULE_apt = 7, RULE_command = 8;
	public static readonly string[] ruleNames = {
		"program", "script", "host", "become", "tasks_lb", "tasks", "name", "apt", 
		"command"
	};

	private static readonly string[] _LiteralNames = {
		null, "'host'", "'become'", "'tasks'", "'name'", "'>'", null, null, null, 
		null, "'.'", null, null, null, null, "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HOST_LBL", "BECOME_LBL", "TASKS_LBL", "NAME_LBL", "MAYORQUE", "GUION", 
		"DIR", "SEP", "SP", "PUNTO", "NUM", "TEXT", "WORD", "NEWLINE", "BACKSLASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Proyecto.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ProyectoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ProyectoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ProyectoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ProyectoParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoVisitor<TResult> typedVisitor = visitor as IProyectoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			script();
			State = 19;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HostContext host() {
			return GetRuleContext<HostContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tasks_lbContext tasks_lb() {
			return GetRuleContext<Tasks_lbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BecomeContext become() {
			return GetRuleContext<BecomeContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoVisitor<TResult> typedVisitor = visitor as IProyectoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 2, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			host();
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GUION) {
				{
				State = 22;
				become();
				}
			}

			State = 25;
			tasks_lb();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(ProyectoParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST_LBL() { return GetToken(ProyectoParser.HOST_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ProyectoParser.TEXT, 0); }
		public HostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_host; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoVisitor<TResult> typedVisitor = visitor as IProyectoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HostContext host() {
		HostContext _localctx = new HostContext(Context, State);
		EnterRule(_localctx, 4, RULE_host);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			Match(GUION);
			State = 28;
			Match(HOST_LBL);
			State = 29;
			Match(SEP);
			State = 30;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BecomeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(ProyectoParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BECOME_LBL() { return GetToken(ProyectoParser.BECOME_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ProyectoParser.TEXT, 0); }
		public BecomeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_become; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoVisitor<TResult> typedVisitor = visitor as IProyectoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBecome(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BecomeContext become() {
		BecomeContext _localctx = new BecomeContext(Context, State);
		EnterRule(_localctx, 6, RULE_become);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(GUION);
			State = 33;
			Match(BECOME_LBL);
			State = 34;
			Match(SEP);
			State = 35;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tasks_lbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TASKS_LBL() { return GetToken(ProyectoParser.TASKS_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ProyectoParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ProyectoParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TasksContext[] tasks() {
			return GetRuleContexts<TasksContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TasksContext tasks(int i) {
			return GetRuleContext<TasksContext>(i);
		}
		public Tasks_lbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tasks_lb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoVisitor<TResult> typedVisitor = visitor as IProyectoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTasks_lb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tasks_lbContext tasks_lb() {
		Tasks_lbContext _localctx = new Tasks_lbContext(Context, State);
		EnterRule(_localctx, 8, RULE_tasks_lb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 37;
				Match(SP);
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SP );
			State = 42;
			Match(TASKS_LBL);
			State = 43;
			Match(SEP);
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 44;
				tasks();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TasksContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AptContext apt() {
			return GetRuleContext<AptContext>(0);
		}
		public TasksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tasks; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoVisitor<TResult> typedVisitor = visitor as IProyectoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTasks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TasksContext tasks() {
		TasksContext _localctx = new TasksContext(Context, State);
		EnterRule(_localctx, 10, RULE_tasks);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			name();
			State = 50;
			apt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_LBL() { return GetToken(ProyectoParser.NAME_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ProyectoParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ProyectoParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ProyectoParser.SP, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoVisitor<TResult> typedVisitor = visitor as IProyectoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 12, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 52;
				Match(SP);
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SP );
			State = 57;
			Match(NAME_LBL);
			State = 58;
			Match(SEP);
			State = 59;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ProyectoParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIR() { return GetToken(ProyectoParser.DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(ProyectoParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(ProyectoParser.SP, i);
		}
		public AptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoVisitor<TResult> typedVisitor = visitor as IProyectoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AptContext apt() {
		AptContext _localctx = new AptContext(Context, State);
		EnterRule(_localctx, 14, RULE_apt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 61;
				Match(SP);
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SP );
			State = 66;
			Match(TEXT);
			State = 67;
			Match(SEP);
			State = 68;
			command();
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 69;
				Match(SP);
				}
			}

			State = 72;
			Match(DIR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComandoContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(ProyectoParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(ProyectoParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(ProyectoParser.GUION, 0); }
		public ComandoContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoVisitor<TResult> typedVisitor = visitor as IProyectoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComando(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 16, RULE_command);
		int _la;
		try {
			_localctx = new ComandoContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(TEXT);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GUION) {
				{
				State = 75;
				Match(GUION);
				}
			}

			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEXT) {
				{
				State = 78;
				Match(TEXT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', 'T', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1A', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x6', '\x6', ')', '\n', 
		'\x6', '\r', '\x6', '\xE', '\x6', '*', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x6', '\x6', '\x30', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\x31', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x6', '\b', '\x38', 
		'\n', '\b', '\r', '\b', '\xE', '\b', '\x39', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x6', '\t', '\x41', '\n', '\t', 
		'\r', '\t', '\xE', '\t', '\x42', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', 'I', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', 'O', '\n', '\n', '\x3', '\n', '\x5', '\n', 
		'R', '\n', '\n', '\x3', '\n', '\x2', '\x2', '\v', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', '\x2', '\x2', 'R', '\x2', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x4', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x1D', '\x3', '\x2', '\x2', '\x2', '\b', '\"', '\x3', '\x2', 
		'\x2', '\x2', '\n', '(', '\x3', '\x2', '\x2', '\x2', '\f', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x37', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x12', 'L', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x15', '\x5', '\x4', '\x3', '\x2', '\x15', '\x16', '\a', '\x2', 
		'\x2', '\x3', '\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x19', 
		'\x5', '\x6', '\x4', '\x2', '\x18', '\x1A', '\x5', '\b', '\x5', '\x2', 
		'\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', 
		'\x5', '\n', '\x6', '\x2', '\x1C', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', '\x1E', '\a', '\b', '\x2', '\x2', '\x1E', '\x1F', '\a', '\x3', 
		'\x2', '\x2', '\x1F', ' ', '\a', '\n', '\x2', '\x2', ' ', '!', '\a', '\xE', 
		'\x2', '\x2', '!', '\a', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', 
		'\b', '\x2', '\x2', '#', '$', '\a', '\x4', '\x2', '\x2', '$', '%', '\a', 
		'\n', '\x2', '\x2', '%', '&', '\a', '\xE', '\x2', '\x2', '&', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\'', ')', '\a', '\v', '\x2', '\x2', '(', '\'', '\x3', 
		'\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', 
		'\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', 
		'\x2', '\x2', '\x2', ',', '-', '\a', '\x5', '\x2', '\x2', '-', '/', '\a', 
		'\n', '\x2', '\x2', '.', '\x30', '\x5', '\f', '\a', '\x2', '/', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\v', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x5', 
		'\xE', '\b', '\x2', '\x34', '\x35', '\x5', '\x10', '\t', '\x2', '\x35', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\a', '\v', '\x2', '\x2', 
		'\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\a', '\x6', '\x2', '\x2', '<', '=', '\a', '\n', '\x2', '\x2', '=', 
		'>', '\a', '\xE', '\x2', '\x2', '>', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x41', '\a', '\v', '\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\xE', '\x2', 
		'\x2', '\x45', '\x46', '\a', '\n', '\x2', '\x2', '\x46', 'H', '\x5', '\x12', 
		'\n', '\x2', 'G', 'I', '\a', '\v', '\x2', '\x2', 'H', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\a', '\t', '\x2', '\x2', 'K', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'N', '\a', '\xE', '\x2', '\x2', 'M', 'O', '\a', 
		'\b', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\a', 
		'\xE', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'R', '\x13', '\x3', '\x2', '\x2', '\x2', '\n', '\x19', 
		'*', '\x31', '\x39', '\x42', 'H', 'N', 'Q',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
